-------------------popl------------------------


#include "assert.h"
void foo(){
int x, y;
       x=0;
       y=50;
       while(x<100) {
               x=x+1;
               if (x>50) {
                       y=y+1;
               }
       }
	assert(y==100);
}

-----------------------------------------------------

---------------------cav-------------------------------

#include "assert.h"

void foo(){
int x, y, flag;
       x=0;
       y=0;
       flag=0;
       while (flag < 1) {
               if (x<=50)
                       y=y+1;
               else
                       y=y-1;
               
               if (y<0) {
                       flag=1;
               }
               if (flag < 1) {
                       x=x+1;
               }
       }

	asssert(x<=102);
	assert(y<=51);
}

-----------------------------------------------------

-------------------tacas------------------------


#include "assert.h"
int __BLAST_NONDET;
void foo(){
int x, y, w, z;
int arandom, brandom, crandom;
x=0;y=0;w=0;z=0;

while(__BLAST_NONDET) {
       if(__BLAST_NONDET){
               x=x+1;
               y=y+100;
	}
       else{
                if(__BLAST_NONDET){
                       if(x>=4){
                               x=x+1;
                               y=y+1;
                       }
		}
               else{
                       if(y>10*w && z>=100*x){
                               y=-y;
                       }
               }
	}
       w=w+1;z=z+10;
}
if(x>=4)
  assert(y>2);
}

-----------------------------------------------------------

-------------------------svd--------------------------------

#include <math.h>
#include "nrutil.h"
#include "assert.h"
int NONDET;

void main(int n)
{
  int i,j,k,l;
  
  //tmpl("(le(n,l,i,j,k),le(n,l,i,j,k))");

  assume(l>0);

  for (i=n;i>=1;i--) { // Accumulation of right-hand transformations. 
    if (i < n) {
      if ( NONDET ) {
	for (j=l;j<=n;j++) { // Double division to avoid possible underflow.   
	  assert(1<=j);assert(j<=n);
	  assert(1<=i);assert(i<=n);
	  //assert(1<=i);assert(i<=m); // TODO feasible counterexample found
	  assert(1<=l);assert(l<=n);
	}
	for (j=l;j<=n;j++) {
	  for (k=l;k<=n;k++) { 
	    //assert(1<=i);assert(i<=m); // TODO feasible counterexample found
	    assert(1<=k);assert(k<=n);
	    assert(1<=j);assert(j<=n);
	  }
	  for (k=l;k<=n;k++) { 
	    assert(1<=k);assert(k<=n);
	    assert(1<=j);assert(j<=n);
	    assert(1<=i);assert(i<=n);
	  }
	}
      }
      for (j=l;j<=n;j++) { 
        assert(1<=j);assert(j<=n);
	assert(1<=i);assert(i<=n);
      }
    }
    
    assert(1<=i);
    assert(i<=n);
    assert(1<=i);assert(i<=n);
    l=i;
  }

}
-----------------------------------------------------------------------

---------------------------svd1-----------------------------------------

#include <math.h>
#include "nrutil.h"
#include "assert.h"
int NONDET;

void main(int n)
{
  int i,j,k,l;
  
  //tmpl("(le(n,l,i,j,k),le(n,l,i,j,k))");

  assume(l>0);

  for (i=n;i>=1;i--) { // Accumulation of right-hand transformations. 
    if (i < n) {
      if ( NONDET ) {
	for (j=l;j<=n;j++) { // Double division to avoid possible underflow.   
	  assert(1<=j);assert(j<=n);
	  assert(1<=i);assert(i<=n);
	  //assert(1<=i);assert(i<=m); // TODO feasible counterexample found
	  assert(1<=l);assert(l<=n);
	}
	for (j=l;j<=n;j++) {
	  for (k=l;k<=n;k++) { 
	    //assert(1<=i);assert(i<=m); // TODO feasible counterexample found
	    assert(1<=k);assert(k<=n);
	    assert(1<=j);assert(j<=n);
	  }
	  for (k=l;k<=n;k++) { 
	    assert(1<=k);assert(k<=n);
	    assert(1<=j);assert(j<=n);
	    assert(1<=i);assert(i<=n);
	  }
	}
      }
      for (j=l;j<=n;j++) { 
        assert(1<=j);assert(j<=n);
	assert(1<=i);assert(i<=n);
      }
    }
    
    assert(1<=i);
    assert(i<=n);
    assert(1<=i);assert(i<=n);
    l=i;
  }
 assert(l==i+1);
}
---------------------------------------------------------

------------------heapsort--------------------------------

#include "assert.h"
int __BLAST_NONDET;

void foo( ){
  int n,l,r,i,j;
  
  assume(1 <= n);
  l = n + 1;
  n=n+n;
  r = n;
  if(l>1) {
    l--;
  } else {
    r--;
  }
  while(r > 1) {
    i = l;
    j = 2*l;
    while(j <= r) {
      if( j < r) {
	assert(1 <= j);assert(j <= n);
	assert(1 <= j+1);assert(j+1 <= n);
	if( __BLAST_NONDET )
	  j = j + 1;
      }
      assert(1 <= j);assert(j <= n);
      if( __BLAST_NONDET ) { 
      	break;
      }
      assert(1 <= i);
      assert(i <= n);
      assert(1 <= j);
      assert(j <= n);
      i = j;
      j = 2*j;
    }
    if(l > 1) {
      assert(1 <= l);assert(l <= n);
      l--;
    } else {
      assert(1 <= r);assert(r <= n);
      r--;
    }
  }
 }
---------------------------------------------------------------------

------------------heapsort1---------------------------------------

#include "assert.h"
int __BLAST_NONDET;

void foo( ){
  int n,l,r,i,j;
  
  assume(1 <= n);
  l = n + 1;
  n=n+n;
  r = n;
  if(l>1) {
    l--;
  } else {
    r--;
  }
  while(r > 1) {
    i = l;
    j = 2*l;
    while(j <= r) {
      if( j < r) {
	assert(1 <= j);assert(j <= n);
	assert(1 <= j+1);assert(j+1 <= n);
	if( __BLAST_NONDET )
	  j = j + 1;
      }
      assert(1 <= j);assert(j <= n);
      if( __BLAST_NONDET ) { 
      	break;
      }
      assert(1 <= i);
      assert(i <= n);
      assert(1 <= j);
      assert(j <= n);
      i = j;
      j = 2*j;
    }
    if(l > 1) {
      assert(1 <= l);assert(l <= n);
      l--;
    } else {
      assert(1 <= r);assert(r <= n);
      r--;
    }
  }
  assert(l==1);
}

------------------------------------------------------------------------

-------------------mergesort-------------------------------------

#include <assert.h>

int __BLAST_NONDET;

// This is an iterative version of merge sort.
// It merges pairs of two consecutive lists one after another.
// After scanning the whole array to do the above job,
// it goes to the next stage. Variable k controls the size
// of lists to be merged. k doubles each time the main loop
// is executed.
#include <stdio.h>
#include <math.h>
int i,n,t,k;
int l,r,u,j;
int x,y,z;
//int a[100000],b[100000];

main()
{ 
  x=1;
  while (x<n) {
    z=1;
    while (z+x<=n) {
      y=z+x*2;
      if (y>n) {y=n+1;}
      //      merge(z,z+x,y);
      l = z; r = z+x; u = y;
      i=l; j=r; k=l;
      while (i<r && j<u) { 
	//	assert(0<=i);assert(i<=n);
	//assert(0<=j);assert(j<=n);
	if(__BLAST_NONDET) {
	//if (a[i]<=a[j]) {
	  //assert(0<=i);assert(i<=n);
	  //assert(0<=k);assert(k<=n);
	  //b[k]=a[i]; 
	  i++;
	} 
	else {
	  //assert(0<=j);assert(j<=n);
	  //assert(0<=k);assert(k<=n);	  
	  //b[k]=a[j]; 
	  j++;
	}
	k++;
      }
      //assert(0<=r);assert(r<=n);
      
      assert(k<=n);
      
      while (i<r) {
	//assert(0<=i);assert(i<=n);
	//assert(0<=k);assert(k<=n);
	//b[k]=a[i]; 
	i++; 
	k++;
      }
      while (j<u) { 
	//assert(0<=j);assert(j<=n);
	//assert(0<=k);assert(k<=n);
	//b[k]=a[j]; 
	j++; k++;
      }
      for (k=l; k<u; k++) { 
	//assert(0<=k);assert(k<=n);
	//a[k]=b[k]; 
      }
      
      z=z+x*2;
    }
    x=x*2;
  }
}
------------------------------------------------------------

-------------------mergesort1-------------------------------
 #include <assert.h>

int __BLAST_NONDET;

// This is an iterative version of merge sort.
// It merges pairs of two consecutive lists one after another.
// After scanning the whole array to do the above job,
// it goes to the next stage. Variable k controls the size
// of lists to be merged. k doubles each time the main loop
// is executed.
#include <stdio.h>
#include <math.h>
int i,n,t,k;
int l,r,u,j;
int x,y,z;
//int a[100000],b[100000];

main()
{ 
  x=1;
  while (x<n) {
    z=1;
    while (z+x<=n) {
      y=z+x*2;
      if (y>n) {
        y=n+1;
        assert(x>=1);
      }
      //      merge(z,z+x,y);
      l = z; r = z+x; u = y;
      i=l; j=r; k=l;
      while (i<r && j<u) { 
	//	assert(0<=i);assert(i<=n);
	//assert(0<=j);assert(j<=n);
	if(__BLAST_NONDET) {
	//if (a[i]<=a[j]) {
	  //assert(0<=i);assert(i<=n);
	  //assert(0<=k);assert(k<=n);
	  //b[k]=a[i]; 
	  i++;
	} 
	else {
	  //assert(0<=j);assert(j<=n);
	  //assert(0<=k);assert(k<=n);	  
	  //b[k]=a[j]; 
	  j++;
	}
	k++;
      }
      //assert(0<=r);assert(r<=n);
      
      //assert(k<=n);
      
      while (i<r) {
	//assert(0<=i);assert(i<=n);
	//assert(0<=k);assert(k<=n);
	//b[k]=a[i]; 
	i++; 
	k++;
      }
      while (j<u) { 
	//assert(0<=j);assert(j<=n);
	//assert(0<=k);assert(k<=n);
	//b[k]=a[j]; 
	j++; k++;
      }
      for (k=l; k<u; k++) { 
	//assert(0<=k);assert(k<=n);
	//a[k]=b[k]; 
      }
      
      z=z+x*2;
    }
    x=x*2;
  }
}

-----------------------------------------


-------------spam------------------------------

#include "assert.h"

int __BLAST_NONDET;

void main ()
{
  int len;
  int i;
  int j;
  //  char buffer[BUFSZ];
  int bufsize;
  int limit = bufsize - 4;

  //tmpl("(le(len,i,bufsize,j,limit),le(len,i,bufsize,j,limit))");

  for (i = 0; i < len; ) {
    for (j = 0; i < len && j < limit; ){     
      if (i + 1 < len){ 
	assert(i+1<len);//1
	assert(0<=i);//2//Interesting assert
	if( __BLAST_NONDET ) goto ELSE;
        assert(i<len);//3
	assert(0<=i); //4
        assert(j<bufsize);//5 //Interesting Assert
	assert(0<=j);	
	//        buffer[j] = msg[i];
        j++;
        i++;
        assert(i<len);//6
	assert(0<=i);//7
        assert(j<bufsize);//8 //Very intersting
	assert(0<=j);	//9

	//        buffer[j] = msg[i];
        j++;
        i++;
        assert(j<bufsize);//10
	assert(0<=j);	//11
        /* OK */
	//        buffer[j] = '.';
        j++;
      } else {
ELSE:
        assert(i<len);//12
	assert(0<=i);//Really really interesting
        assert(j<bufsize);//13
	assert(0<=j);	//14
	
	//	buffer[j] = msg[i];
        j++;
        i++;
      }
    }
  }
}



-----------------------------------------------------------------------

---------------------------spam1----------------------------------

#include "assert.h"

int __BLAST_NONDET;

void main ()
{
  int len;
  int i;
  int j;
  //  char buffer[BUFSZ];
  int bufsize;
  int limit = bufsize - 4;

  //tmpl("(le(len,i,bufsize,j,limit),le(len,i,bufsize,j,limit))");

  for (i = 0; i < len; ) {
    for (j = 0; i < len && j < limit; ){
      assert(j>=0);     
      if (i + 1 < len){ 
	assert(i+1<len);//1
	assert(0<=i);//2//Interesting assert
	if( __BLAST_NONDET ) goto ELSE;
        assert(i<len);//3
	assert(0<=i); //4
        assert(j<bufsize);//5 //Interesting Assert
	assert(0<=j);	
	//        buffer[j] = msg[i];
        j++;
        i++;
        assert(i<len);//6
	assert(0<=i);//7
        assert(j<bufsize);//8 //Very intersting
	assert(0<=j);	//9

	//        buffer[j] = msg[i];
        j++;
        i++;
        assert(j<bufsize);//10
	assert(0<=j);	//11
        /* OK */
	//        buffer[j] = '.';
        j++;
      } else {
ELSE:
        assert(i<len);//12
	assert(0<=i);//Really really interesting
        assert(j<bufsize);//13
	assert(0<=j);	//14
	
	//	buffer[j] = msg[i];
        j++;
        i++;
      }
    }
  }
}



-------------------------------------------------------

---------------------ex1---------------------------------

#include "assert.h"
void foo(){
int x, y, flag;

       x=0;
       y=0;
       flag=0;
       while(flag<1) {
               if (y<0){
                        flag=1;
               }
               if(flag<1) 
                        x=x+1;
               
               if (x<50) 
                       y=y+1;
               else
                       y=y-1;
               
       }
	assert(y==-2);
	assert(x==99);
}

-----------------------------------------------

---------------ex2------------------------------

#include "assert.h"
void foo(){
int x, y, z;
x=0;y=0;z=0;
while (x<100) {
       if(x<=50)
               y=y+1;
       else
               y=y-1;
       
       if(x<25)
               z=z+1;
       else
               z=z+5;
       
       x=x+1;
}
assert(z==400);
assert(y==2);
assert(x==100);
}

-----------------------------------------------------
